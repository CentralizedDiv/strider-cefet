{"ast":null,"code":"import _slicedToArray from \"/Users/arthurmelo/workfolder/strider-cefet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/arthurmelo/workfolder/strider-cefet/src/components/app.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Map } from \"../core/map\";\nimport { Polygon, Tooltip, Polyline, Popup } from \"react-leaflet\";\nimport { SpinnerContainer } from \"../core/spinner-container\";\nimport { lineString, polygon } from \"@turf/helpers\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport axios from \"axios\";\n\nvar sliceTracking = function sliceTracking(route, geometry) {\n  var first = route[0];\n  var routeOffseted = route.slice(1);\n  var slicedTracking = [];\n  var turfPolygon = polygon([geometry]);\n  routeOffseted.reduce(function (point1, point2) {\n    // Create a line between these two points\n    var line = lineString([point1, point2]);\n    var isPoint1Inside = booleanPointInPolygon(point1, turfPolygon);\n    var intersects = lineIntersect(line, turfPolygon);\n    var trackingCuts = intersects.features.length > 0;\n    var trackingCutsOnce = intersects.features.length === 1;\n    var isTrackingInside = !trackingCuts && isPoint1Inside;\n\n    if (isTrackingInside) {\n      slicedTracking.push(point1);\n    } else if (trackingCutsOnce) {\n      var intersectPoint = intersects.features[0].geometry.coordinates.slice();\n\n      if (isPoint1Inside) {\n        slicedTracking.push(point1);\n        slicedTracking.push(intersectPoint);\n      } else {\n        slicedTracking.push(intersectPoint);\n      }\n    }\n\n    return point2;\n  }, first);\n  return slicedTracking;\n};\n\nvar CustomTooltip = function CustomTooltip(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, props.name);\n};\n\nvar CustomPopup = function CustomPopup(props) {\n  return React.createElement(\"div\", {\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, props.description);\n};\n\nexport var StriderCefet = function StriderCefet() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      slicedTracking = _useState4[0],\n      setSlicedTracking = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      cefetGeometry = _useState6[0],\n      setCefetGeometry = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cefetBuiildings = _useState8[0],\n      setCefetBuildings = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      studentTracking = _useState10[0],\n      setStudentTracking = _useState10[1];\n\n  var mapRef = useRef();\n  useEffect(function () {\n    setIsLoading(true);\n    var promises = [axios.get(\"https://strider-cefet-backend.arthurherbert.now.sh/get-cefet-geometry\").then(function (response) {\n      setCefetGeometry(response.data);\n    }), axios.get(\"https://strider-cefet-backend.arthurherbert.now.sh/get-cefet-buildings\").then(function (response) {\n      setCefetBuildings(response.data);\n    }), axios.get(\"https://strider-cefet-backend.arthurherbert.now.sh/get-student-tracking\").then(function (response) {\n      setStudentTracking(response.data);\n    })];\n    Promise.all(promises).then(function () {\n      setIsLoading(false);\n    });\n  }, []);\n  useEffect(function () {\n    if (cefetGeometry && cefetGeometry.length > 0 && studentTracking && studentTracking.length > 0) {\n      setSlicedTracking(sliceTracking(studentTracking, cefetGeometry));\n    }\n  }, [studentTracking, cefetGeometry]);\n  return React.createElement(React.Fragment, null, React.createElement(SpinnerContainer, {\n    isLoading: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(Map, {\n    ref: mapRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, studentTracking.length > 0 && React.createElement(Polyline, {\n    positions: studentTracking,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), slicedTracking.length > 0 && React.createElement(Polyline, {\n    color: \"lime\",\n    positions: slicedTracking,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), cefetGeometry.length > 0 && React.createElement(Polygon, {\n    color: \"purple\",\n    fillOpacity: 0.1,\n    positions: cefetGeometry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    sticky: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(CustomTooltip, {\n    name: \"C2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))), cefetBuiildings.map(function (building, index) {\n    return React.createElement(Polygon, {\n      key: index,\n      color: building.color,\n      fillOpacity: 0.4,\n      positions: building.coordinates,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      sticky: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(CustomTooltip, {\n      name: building.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(Popup, {\n      closeButton: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(CustomPopup, {\n      onClick: mapRef.current.closePopup,\n      description: building.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })));\n  })));\n};","map":{"version":3,"sources":["/Users/arthurmelo/workfolder/strider-cefet/src/components/app.js"],"names":["React","useState","useEffect","useRef","Map","Polygon","Tooltip","Polyline","Popup","SpinnerContainer","lineString","polygon","lineIntersect","booleanPointInPolygon","axios","sliceTracking","route","geometry","first","routeOffseted","slice","slicedTracking","turfPolygon","reduce","point1","point2","line","isPoint1Inside","intersects","trackingCuts","features","length","trackingCutsOnce","isTrackingInside","push","intersectPoint","coordinates","CustomTooltip","props","name","CustomPopup","onClick","description","StriderCefet","isLoading","setIsLoading","setSlicedTracking","cefetGeometry","setCefetGeometry","cefetBuiildings","setCefetBuildings","studentTracking","setStudentTracking","mapRef","promises","get","then","response","data","Promise","all","map","building","index","color","current","closePopup"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Map } from \"../core/map\";\nimport { Polygon, Tooltip, Polyline, Popup } from \"react-leaflet\";\nimport { SpinnerContainer } from \"../core/spinner-container\";\nimport { lineString, polygon } from \"@turf/helpers\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport axios from \"axios\";\n\nconst sliceTracking = (route, geometry) => {\n  const first = route[0];\n  const routeOffseted = route.slice(1);\n  const slicedTracking = [];\n  const turfPolygon = polygon([geometry]);\n  routeOffseted.reduce((point1, point2) => {\n    // Create a line between these two points\n    const line = lineString([point1, point2]);\n    const isPoint1Inside = booleanPointInPolygon(point1, turfPolygon);\n\n    const intersects = lineIntersect(line, turfPolygon);\n    const trackingCuts = intersects.features.length > 0;\n    const trackingCutsOnce = intersects.features.length === 1;\n    const isTrackingInside = !trackingCuts && isPoint1Inside;\n\n    if (isTrackingInside) {\n      slicedTracking.push(point1);\n    } else if (trackingCutsOnce) {\n      const intersectPoint = intersects.features[0].geometry.coordinates.slice();\n      if (isPoint1Inside) {\n        slicedTracking.push(point1);\n        slicedTracking.push(intersectPoint);\n      } else {\n        slicedTracking.push(intersectPoint);\n      }\n    }\n    return point2;\n  }, first);\n  return slicedTracking;\n};\n\nconst CustomTooltip = props => {\n  return <div>{props.name}</div>;\n};\n\nconst CustomPopup = props => {\n  return <div onClick={props.onClick}>{props.description}</div>;\n};\n\nexport const StriderCefet = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [slicedTracking, setSlicedTracking] = useState([]);\n  const [cefetGeometry, setCefetGeometry] = useState([]);\n  const [cefetBuiildings, setCefetBuildings] = useState([]);\n  const [studentTracking, setStudentTracking] = useState([]);\n  const mapRef = useRef();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const promises = [\n      axios\n        .get(\n          \"https://strider-cefet-backend.arthurherbert.now.sh/get-cefet-geometry\"\n        )\n        .then(response => {\n          setCefetGeometry(response.data);\n        }),\n      axios\n        .get(\n          \"https://strider-cefet-backend.arthurherbert.now.sh/get-cefet-buildings\"\n        )\n        .then(response => {\n          setCefetBuildings(response.data);\n        }),\n      axios\n        .get(\n          \"https://strider-cefet-backend.arthurherbert.now.sh/get-student-tracking\"\n        )\n        .then(response => {\n          setStudentTracking(response.data);\n        })\n    ];\n    Promise.all(promises).then(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (\n      cefetGeometry &&\n      cefetGeometry.length > 0 &&\n      studentTracking &&\n      studentTracking.length > 0\n    ) {\n      setSlicedTracking(sliceTracking(studentTracking, cefetGeometry));\n    }\n  }, [studentTracking, cefetGeometry]);\n\n  return (\n    <>\n      <SpinnerContainer isLoading={isLoading} />\n      <Map ref={mapRef}>\n        {studentTracking.length > 0 && <Polyline positions={studentTracking} />}\n        {slicedTracking.length > 0 && (\n          <Polyline color=\"lime\" positions={slicedTracking} />\n        )}\n        {cefetGeometry.length > 0 && (\n          <Polygon color=\"purple\" fillOpacity={0.1} positions={cefetGeometry}>\n            <Tooltip sticky>\n              <CustomTooltip name={\"C2\"} />\n            </Tooltip>\n          </Polygon>\n        )}\n        {cefetBuiildings.map((building, index) => {\n          return (\n            <Polygon\n              key={index}\n              color={building.color}\n              fillOpacity={0.4}\n              positions={building.coordinates}\n            >\n              <Tooltip sticky>\n                <CustomTooltip name={building.name} />\n              </Tooltip>\n              <Popup closeButton={false}>\n                <CustomPopup\n                  onClick={mapRef.current.closePopup}\n                  description={building.description}\n                />\n              </Popup>\n            </Polygon>\n          );\n        })}\n      </Map>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}